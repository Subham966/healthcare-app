{"ast":null,"code":"var _jsxFileName = \"/home/subham-pradhan/Downloads/healthcare-app/frontend/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientList() {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Fetch the list of patients when the component mounts\n    const fetchPatients = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/patients');\n        if (response.ok) {\n          const data = await response.json();\n          setPatients(data);\n        } else {\n          setError('Failed to load patients.');\n        }\n      } catch (error) {\n        setError('Error connecting to the backend.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatients();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: patients.map((patient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [patient.name, \" - Age: \", patient.age, \" - Condition: \", patient.condition]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(PatientList, \"49M53i5/t2D7EfN+O5aVSzGTy2g=\");\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PatientList","_s","patients","setPatients","loading","setLoading","error","setError","fetchPatients","response","fetch","ok","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","map","patient","index","name","age","condition","_c","$RefreshReg$"],"sources":["/home/subham-pradhan/Downloads/healthcare-app/frontend/src/app.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction PatientList() {\n    const [patients, setPatients] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        // Fetch the list of patients when the component mounts\n        const fetchPatients = async () => {\n            try {\n                const response = await fetch('http://localhost:5000/patients');\n                if (response.ok) {\n                    const data = await response.json();\n                    setPatients(data);\n                } else {\n                    setError('Failed to load patients.');\n                }\n            } catch (error) {\n                setError('Error connecting to the backend.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchPatients();\n    }, []);\n\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n\n    return (\n        <div>\n            <h2>Patient List</h2>\n            <ul>\n                {patients.map((patient, index) => (\n                    <li key={index}>\n                        {patient.name} - Age: {patient.age} - Condition: {patient.condition}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default PatientList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAID,QAAQ,CAACE,EAAE,EAAE;UACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCV,WAAW,CAACS,IAAI,CAAC;QACrB,CAAC,MAAM;UACHL,QAAQ,CAAC,0BAA0B,CAAC;QACxC;MACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZC,QAAQ,CAAC,kCAAkC,CAAC;MAChD,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAe,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;EAEA,IAAIZ,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAe,QAAA,EAAIR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACzB;EAEA,oBACInB,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBnB,OAAA;MAAAe,QAAA,EACKZ,QAAQ,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzBtB,OAAA;QAAAe,QAAA,GACKM,OAAO,CAACE,IAAI,EAAC,UAAQ,EAACF,OAAO,CAACG,GAAG,EAAC,gBAAc,EAACH,OAAO,CAACI,SAAS;MAAA,GAD9DH,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACjB,EAAA,CA9CQD,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAgDpB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}